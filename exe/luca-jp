#!/usr/bin/ruby
# frozen_string_literal: true

require 'optparse'
require 'luca/jp'
require 'luca_salary/jp_payreport'

class LucaCmd
  def self.syouhizei(args, params)
    if params[:export]
      Luca::Jp::Syouhizei.range(*auto_range(args, params)).export_json
    else
      puts Luca::Jp::Syouhizei.range(*auto_range(args, params)).kani
    end
  end

  def self.houjinzei(args, params)
    if params[:export]
      Luca::Jp::Aoiro.range(*auto_range(args, params)).export_json
    else
      puts Luca::Jp::Aoiro.range(*auto_range(args, params)).kani
    end
  end

  def self.chihouzei(args, params)
    if params[:export]
      accounts = Luca::Jp::Util.eltax_config('reports').map do |report|
        Luca::Jp::Chihouzei.range(*auto_range(args, params)).export_json(report)
      end
      puts JSON.dump(accounts)
    else
      Luca::Jp::Util.eltax_config('reports').each do |report|
        File.open("chihouzei-#{report['jichitai_code']}#{report['jimusho_code']}.xml", 'w') { |f| f.puts(Luca::Jp::Chihouzei.range(*auto_range(args, params)).kani(report))}
      end
    end
  end

  def self.urikake(args, params)
    date = "#{args[0]}-#{args[1]}-1"
    Luca::Jp::Urikake.new(date).report(params[:total])
  end

  def self.auto_range(args, params)
    case args.length
    when 4
      args
    when 2
      date = Date.new(args[0].to_i, args[1].to_i)
      r = LucaBook::Util.current_fy(date, to: date)
      [r[0].year, r[0].month, r[1].year, r[1].month]
    when 0
      date = params[:lastyear] ? Date.today.prev_year : Date.today
      r = LucaBook::Util.current_fy(date)
      [r[0].year, r[0].month, r[1].year, r[1].month]
    end
  end
end

module LucaSalaryCmd
  class Export
    def self.payreport(args = nil, _params = nil)
      puts LucaSalary::JpPayreport.export(args.first)
    end
  end
end

LucaRecord::Base.valid_project?
cmd = ARGV.shift
params = {}

case cmd
when 'h', /hou?jinzei/
  OptionParser.new do |opt|
    opt.banner = 'Usage: luca-jp h|houjinzei [options] [yyyy mm yyyy mm]'
    opt.on('--export', 'export json') { |_v| params[:export] = true }
    opt.on('--lastyear', 'report on last Financial year') { |_v| params[:lastyear] = true }
    args = opt.parse!(ARGV)
    LucaCmd.houjinzei(args, params)
  end
when 's', /s[yh]ou?hizei/
    OptionParser.new do |opt|
      opt.banner = 'Usage: luca-jp s|syouhizei [options] [yyyy mm yyyy mm]'
      opt.on('--export', 'export json') { |_v| params[:export] = true }
      opt.on('--lastyear', 'report on last Financial year') { |_v| params[:lastyear] = true }
      args = opt.parse!(ARGV)
      LucaCmd.syouhizei(args, params)
    end
when 'c', /chihou?zei/
  OptionParser.new do |opt|
    opt.banner = 'Usage: luca-jp c|chihouzei [options] [yyyy mm yyyy mm]'
    opt.on('--export', 'export json') { |_v| params[:export] = true }
    opt.on('--lastyear', 'report on last Financial year') { |_v| params[:lastyear] = true }
    args = opt.parse!(ARGV)
    LucaCmd.chihouzei(args, params)
  end
when /urikake/
  OptionParser.new do |opt|
    opt.banner = 'Usage: luca-jp urikake [options] yyyy mm'
    opt.on('--total VAL', '売掛金総額') { |v| params[:total] = v&.to_i }
    args = opt.parse!(ARGV)
    LucaCmd.urikake(args, params)
  end
when 'k', 'kyuyo', 'salary'
  OptionParser.new do |opt|
    opt.banner = 'Usage: luca-jp kyuyo [--export] year'
    args = opt.parse(ARGV)
    LucaSalaryCmd::Export.payreport(args)
  end
else
  puts 'Proper subcommand needed.'
  puts
  puts 'Usage: luca-jp <subcommand>'
  puts '  h[oujinzei]: 法人税の計算'
  puts '  s[youhizei]: 消費税の計算'
  puts '  c[hihouzei]: 地方税の計算'
  puts '  k[yuyo]: 給与報告（所得税）の計算'
  puts '  urikake: 勘定科目内訳明細書の売掛金リスト(CSV)'
  exit 1
end
